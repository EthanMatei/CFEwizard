<project name="cfg" default="initialize">

	<!-- include the properties file for test (personal) installations
	     build.properties file include; certain targets
	     require values to be set in this file
	-->
	<property name="buildPropertiesFile" value="build.properties"/>
	
	<property file="${buildPropertiesFile}"/>
	
	<property name="localCfgPropertiesFile" value="${user.home}/.cfg.properties"/>
	
	<!--
	<artifact:dependencies pathId="dependency.classpath">
        <dependency groupId="mysql" artifactId="mysql-connector-java" version="5.1.25"/>
	</artifact:dependencies>
	
	<classpath refid="dependency.classpath" />
	-->
	
	<!-- =============================================================
	INITIALIZE
	============================================================== -->
	<target name="initialize"
		    description="Initialize property files (this needs to be run first).">
        
		<available file="${buildPropertiesFile}" property="isBuildPropertiesFileAvailable"/>
		<antcall target="create-build-properties-file"/>
		<echo message="Edit file ${buildPropertiesFile} before running the setup target."/>
	
	    <available file="${localCfgPropertiesFile}" property="isLocalCfgFileAvailable"/>
		<antcall target="create-local-cfg-properties-file"/>
		
	</target>
	
	<!-- =============================================================
	SETUP
	============================================================== -->
	<target name="setup"
	        description="Set up the development environment, e.g., create the dabase and database user.">

		<!-- Create the database -->
        <sql
	        driver="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
	        userid="${mysqlAdminUser}"
	        password="${mysqlAdminPassword}"
	    	src="${basedir}/sql/createDatabase.sql"
	    	print="true"
	    >
		    <classpath>
		      <fileset dir="${basedir}/lib">
		        <include name="**/*.jar"/>
		      </fileset>
		    </classpath>
        </sql>
	
		<!-- Create the database user -->
        <sql
	        driver="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
	        userid="${mysqlAdminUser}"
	        password="${mysqlAdminPassword}"
	    	src="${basedir}/sql/createDatabaseUser.sql"
	    	print="true"
	    >
		    <classpath>
		      <fileset dir="${basedir}/lib">
		        <include name="**/*.jar"/>
		      </fileset>
		    </classpath>
        </sql>

		
		<!-- Create the database tables -->
	    <sql
		    driver="com.mysql.jdbc.Driver"
		    url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
		    userid="${mysqlAdminUser}"
		    password="${mysqlAdminPassword}"
		 	src="${basedir}/sql/createTables.sql"
		   	print="true"
		>
		    <classpath>
		      <fileset dir="${basedir}/lib">
		        <include name="**/*.jar"/>
		      </fileset>
		    </classpath>
	    </sql>
		
		<!-- Create the stored procedures -->
		<!-- This doesn't work. It looks like the cause is the DELIMITER command within the sql scripts
        <sql
	        driver="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
	        userid="${mysqlAdminUser}"
	        password="${mysqlAdminPassword}"
	    	print="true"
        	delimiter="$$" 
        	>

        	<path>
    		    <fileset dir="src/main/sql">
    		      <include name="*.sql"/>
    		    </fileset>
    		  </path>

		    <classpath>
		      <fileset dir="${basedir}/lib">
		        <include name="**/*.jar"/>
		      </fileset>
		    </classpath>
        </sql>
        -->

		
	</target>

	<!-- ================================================
	HIBERNATE TOOLS
	================================================= -->
	<!--
	<taskdef name="hibernate-tools"
	         classname="org.hibernate.tool.ant.HibernateToolTask"
		     classpathref="runtime.classpath">
    </taskdef>
    -->
	
	<!-- =====================================================================
	GENERATE CREATE DB TABLES SCRIPT
	WORK IN PROGRESS
	Currently this is generated programmatically.
	====================================================================== -->
    <target name="generate-create-db-tables-script"
    	    depends="mvn-init"
    	    description="Creates an SQL script for creating the database tables.">
	    <hibernate-tools destdir="sql">
	        <classpath refid="class-path"/>
	        <jpaconfiguration/>
	    	<hbm2ddl drop="false"
	        	     create="true"
	        	     export="false"
	        	     update="false"
	        	     delimiter=";"
	        	     format="true"
	        	     outputfilename="createTables.sql" />
    	</hibernate-tools>
	</target>
	
	
	<target name="update-database">
		<!-- Update the database -->
        <sql
	        driver="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
	        userid="${mysqlAdminUser}"
	        password="${mysqlAdminPassword}"
	    	src="${basedir}/sql/updateDatabase.sql"
	    	print="true"
	    >
		    <classpath>
		      <fileset dir="${basedir}/lib">
		        <include name="**/*.jar"/>
		      </fileset>
		    </classpath>
        </sql>
	</target>
		
		
	<!-- ================================================================
	CREATE-BUILD-PROPERTIES-FILE - create a build.properties file
	================================================================= -->
	<target name="create-build-properties-file"
		    description="Creates a ${buildPropertiesFile} file with default values"
		    unless="isBuildPropertiesFileAvailable">
		<echo file="${buildPropertiesFile}">#------------------------------------------------------------------ 
# The host and port do not typically need to be changed.
# Set the MySQL user and password for your system.
#------------------------------------------------------------------
mysqlHost=localhost
mysqlPort=3306
mysqlAdminUser=root
mysqlAdminPassword=rootPassword</echo>
	</target>

	<!-- ======================================================
	Create Local CFG Properties File
	======================================================= -->
	<target name="create-local-cfg-properties-file"
	        description="Creates a CFG properties file for a local (personal) installation."
		    unless="isLocalCfgFileAvailable">
		<echo file="${localCfgPropertiesFile}"># Hibernate
db.username=cfguser
db.password=cfguserPassword
db.host=jdbc:mysql://localhost:3306/cfg
db.hbm2ddl=update

# CAS
host.cas.url=http://localhost:8080/mCFG
			
# Server
# Must be in sych with db.host</echo>		
        <chmod file="${localCfgPropertiesFile}" perm="600"/>
        <echo message="CFG properties file created in: ${localCfgPropertiesFile}"/>
        <echo message="Note: in Eclipse you may need to do a refresh of your"/>
        <echo message="      directory/file window to actually see the new file."/>
    </target>
	
	
	<!-- ========================================================================================
	MAVEN INITIALIZATION
	========================================================================================= -->
	<target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">   
	    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
	        classpath="lib/maven-ant-tasks-2.1.3.jar"/>
	    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
	        <isset property="maven.repo.local"/>
	    </condition>          
	    <echo>maven.repo.local=${maven.repo.local}</echo>
	    <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
	    <artifact:pom file="pom.xml" id="maven.project"/>
	    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
	        <pom refid="maven.project"/>
	        <localRepository refid="local.repository"/>
	    </artifact:dependencies>
	</target>
	
	
	<target name="mvn-create-db" depends="mvn-init">
		<!-- Create the database -->
        <sql
        	classpathref="compile.classpath"
	        driver="com.mysql.jdbc.Driver"
	        url="jdbc:mysql://${mysqlHost}:${mysqlPort}/?jdbcCompliantTruncation=false"
	        userid="${mysqlAdminUser}"
	        password="${mysqlAdminPassword}"
	    	src="${basedir}/sql/createDatabase.sql"
	    	print="true"
	    >
        </sql>
		
	    <echo>${basedir}/target</echo>
		<echo>${compile.classpath}</echo>
		
		<java classname="cfg.test.TestUtil" classpathref="compile.classpath">
		    <classpath>
		        <pathelement location="target/test-classes"/>
		        <pathelement location="target/classes"/>
		    </classpath>

		</java>
		
		<!--
	    <mkdir dir="target/classes"/>       
	    <javac srcdir="src/main/java" destdir="target/classes" classpathref="compile.classpath"/>
	    <copy todir="target/classes">
	        <fileset dir="src/main/java" excludes="**/*.java"/>
	    </copy>        
	    <copy todir="target/classes" failonerror="false">
	        <fileset dir="src/main/resources"/>
	    </copy>
	    -->             
	</target>
	
</project>