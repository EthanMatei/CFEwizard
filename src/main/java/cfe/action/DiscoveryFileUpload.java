package cfe.action;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.interceptor.SessionAware;

import cfe.utils.Authorization;
import cfe.utils.WebAppProperties;

public class DiscoveryFileUpload extends BaseAction implements SessionAware {

	private static final long serialVersionUID = 1L;
	private static final Log log = LogFactory.getLog(DiscoveryFileUpload.class);

	private Map<String, Object> webSession;
	
	private File discoveryCsv;
	private String discoveryCsvContentType;
	private String discoveryCsvFileName;
	
	private File discoveryDb;
	private String discoverDbContentType;
	private String discoveryDbFileName;
	
	private String scriptDir;
	private String scriptFile;
	private String scriptOutput;
	
	private String baseDir;
	
	public String initialize() throws Exception {
	    return SUCCESS;
	}
	
	public String execute() throws Exception {
		String result = SUCCESS;
		
		if (!Authorization.isAdmin(webSession)) {
			result = LOGIN;
		}
		else {
			//baseDir = System.getProperty("user.dir");
			//baseDir = System.getProperty("user.dir");
			baseDir = WebAppProperties.getRootDir();
			
			// Runtime.getRuntime().exec("test.sh");
			
			this.scriptDir  = new File(getClass().getResource("/R").toURI()).getAbsolutePath();
			this.scriptFile = new File(getClass().getResource("/R/DEdiscovery.R").toURI()).getAbsolutePath();
			String rScriptCommand = WebAppProperties.getRscriptPath() + " " + scriptFile 
					+ " " + scriptDir + " " + discoveryDb + " " + discoveryCsv;
			String logRScriptCommand = WebAppProperties.getRscriptPath() + " " + scriptFile 
					+ " " + scriptDir + " \"" + discoveryDbFileName + "\" \"" + discoveryCsvFileName + "\"";
			log.info("RSCRIPT COMMAND: " + logRScriptCommand);
			scriptOutput = this.runCommand(rScriptCommand);
		}
		return result;
	}

	/** 
	 * Executes the specified command and returns the output from the command.
	 *
	 * @param command the command to execute
	 * @return the output generated by the command
	 * @throws Exception
	 */
	public String runCommand(String command) throws Exception {
		StringBuilder output = new StringBuilder();
		
        Process process = Runtime.getRuntime().exec(command);

	    BufferedReader reader = new BufferedReader(
	    new InputStreamReader(process.getInputStream()));

	    String line;
	    while ((line = reader.readLine()) != null) {
	        output.append(line + "\n");
	    }

	    int status = process.waitFor();
	    if (status != 0) {
            //throw new Exception("Command \"" + command + "\" exited with code " + status);
	    }

		return output.toString();
	}
	
	public void setSession(Map<String, Object> session) {
		this.webSession = session;
		
	}
	
	public void validate() {
	}

	public Map<String, Object> getSession() {
		return webSession;
	}

	public File getDiscoveryCsv() {
		return discoveryCsv;
	}

	public void setDiscoveryCsv(File discoveryCsv) {
		this.discoveryCsv = discoveryCsv;
	}

	public String getDiscoveryCsvContentType() {
		return discoveryCsvContentType;
	}

	public void setDiscoveryCsvContentType(String discoveryCsvContentType) {
		this.discoveryCsvContentType = discoveryCsvContentType;
	}

	public String getDiscoveryCsvFileName() {
		return discoveryCsvFileName;
	}

	public void setDiscoveryCsvFileName(String discoveryCsvFileName) {
		this.discoveryCsvFileName = discoveryCsvFileName;
	}

	public File getDiscoveryDb() {
		return discoveryDb;
	}

	public void setDiscoveryDb(File discoveryDb) {
		this.discoveryDb = discoveryDb;
	}

	public String getDiscoverDbContentType() {
		return discoverDbContentType;
	}

	public void setDiscoverDbContentType(String discoverDbContentType) {
		this.discoverDbContentType = discoverDbContentType;
	}

	public String getDiscoveryDbFileName() {
		return discoveryDbFileName;
	}

	public void setDiscoveryDbFileName(String dicoveryDbFileName) {
		this.discoveryDbFileName = dicoveryDbFileName;
	}

	public String getBaseDir() {
		return baseDir;
	}	
	
	public String getScriptDir() {
	    return scriptDir;	
	}
	
	public String getScriptFile() {
		return scriptFile;
	}
	
	public String getScriptOutput() {
		return scriptOutput;
	}

}
